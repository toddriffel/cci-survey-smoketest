version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/node:14.17.0-buster
    environment:
      DOCKERFILE_PATH: .

  python-base:
    docker:
      - image: circleci/python:3.8.0-buster
jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - store_test_results:
          path: build/test-results/
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:$IMAGE_TAG .
      - run:
          name: Cache Docker image
          command: docker save -o $IMAGE_TAG.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./*.tar

  test:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load cached Docker image
          command: |
            docker load -i /tmp/workspace/$IMAGE_TAG.tar
      - run:
          name: Start survey container
          command: docker run -d --name survey-container $IMAGE_NAME:$IMAGE_TAG
      - run:
          name: Create dummy container for smoke tests
          command: docker create -v /etc/newman --name survey-smoke-tests alpine:3.4 /bin/true
      - run:
          name: Copy smoke tests to dummy container
          command: docker cp survey-smoke-tests/. survey-smoke-tests:/etc/newman
      - run:
          name: Wait for service to be up
          command: |
            docker run --network container:survey-container jwilder/dockerize \
              -wait http://localhost:3000 -timeout 120s -wait-retry-interval 5s
      - run:
          name: Run smoke tests
          command: docker run --network container:survey-container --volumes-from survey-smoke-tests -t postman/newman:4.4.0-alpine run postman_collection.json
      - run:
          name: Notify Ntfy.sh
          command: curl -d "Test smoke test completed" ntfy.sh/pico
      - store_artifacts:
          path: tmp/test-results/
          destination: test-results
      - store_test_results:
          path: tmp/test-results/

  deploy:
    executor: python-base
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Push Docker image to ECR
          command: |
            pip3 install --user awscli --upgrade
            aws --version
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - run:
          name: AWS Ready
          command: echo "Job completed successfully! Image pushed to $AWS_ECR_ACCOUNT_URL/$IMAGE_NAME:$IMAGE_TAG"

      - run:
          name: AWS Repo
          command: |
            docker load -i /tmp/workspace/$IMAGE_TAG.tar
            docker tag $IMAGE_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG
      - run:
          name: Docker Push
          command: |
            docker image ls
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG
      - run:
          name: Notify Ntfy.sh
          command: curl -d "Job completed successfully! Image pushed to $AWS_ECR_ACCOUNT_URL/$IMAGE_NAME:$IMAGE_TAG" ntfy.sh/trpipeline
      - run:
          name: Print Job Complete
          command: echo "Job completed successfully! Image pushed to $AWS_ECR_ACCOUNT_URL/$IMAGE_NAME:$IMAGE_TAG"

workflows:
  version: 2
  build:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: main
